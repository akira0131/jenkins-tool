#!groovy

@Library('jenkins-common-lib') _

 node('master') { timestamps
{
   /** ジョブパラメータ取得ステージ
     * ・
     * ・
     * ・
     * ・
     * ・
     */
    try
    {
        def server = null

        stage('ジョブパラメータ取得')
        {
            try
            {
                // 応答に制限時間を設定
                timeout(time: 20, unit: 'SECONDS')
                {
                    // ユーザから入力を受け付ける
                    def userInput = input(
                        message        :  '''\
                                     |リソース取得先サーバを選択してください。
                                     |（応答時間：10秒）'''.stripMargin(),
                        ok             : '選択する',
                        parameters     : [
                            choice(
                                name   : 'リソース取得先サーバ名:',
                                choices: 'web/apサーバ\nバッチサーバ'
                            )
                        ]
                    )
                }

                // 入力されたデータを変数化
                if(userInput == 'バッチサーバ')
                {
                    server = 'batch'

                } else
                {
                    server = userInput
                }

                printMsg('info', '変数「server」に「' + server + '」がセットされました。')
            }
            catch(Exception e)
            {
                // 応答時間を過ぎた場合は、例外を投げる
                printMsg('error', '応答時間内にリソース取得先サーバを選択してください。')
                throw e
            }
        }
    }
    catch(Exception e) {}

   /** WU起動数判定ステージ
     * ・
     * ・
     * ・
     * ・
     * ・
     */
    stage('WU起動数判定[' + server + ']')
    {
        // 開始メッセージ
        printMsg('info', '-------------------------------------------------------')
        printMsg('info', 'WU起動数判定ステージ START')
        printMsg('info', '-------------------------------------------------------')

        // AP設定ロード
        def env = loadEnvConfig()

        // リソース取得シェル実行
        def result = sshCmd(env, server, 'ls /opt/app/lib')

        // 標準エラー出力が返却されている場合は、例外を投げる
        assert result['stderror'] == null

        // WU起動数結果判定
        switch(true)
        {
            // 危険域
            case(result['stdout'].contains(env.resource.monitor.wu.execute.faital.keyword)) as Boolean:

                // コマンド結果を標準出力
                printMsg('warning', result['stdout'])

                // メール通知
                try
                {
                    emailext(
                        to        : env.mail.address.debug,
                        subject   : '${DEFAULT_SUBJECT}ABORT',
                        body      : '''<p>ジョブ走行中に予期せぬエラーが発生しました。</p>
                                        <p>解析をお願いします。</p>''',
                        attachLog : false,
                        mimeType  : 'text/html'
                    )

                    printMsg('info', 'メール通知に成功しました。')
                    printMsg('info', '送信先アドレス: ' + env.mail.address.debug)
                }
                catch(Exception e) {

                    printMsg('error', 'メール通知に失敗しました。')
                    throw e
                }

                // 判定結果を変数化
                def judgeResult = ["${server}": 'faital']

                break

            // 注意域
            case(result['stdout'].contains(env.resource.monitor.wu.execute.warning.keyword)) as Boolean:

                // コマンド結果を標準出力
                printMsg('warning', result['stdout'])

                // メール通知
                try
                {
                    emailext(
                        to        : env.mail.address.debug,
                        subject   : '${DEFAULT_SUBJECT}ABORT',
                        body      : '''<p>ジョブ走行中に予期せぬエラーが発生しました。</p>
                                        <p>解析をお願いします。</p>''',
                        attachLog : false,
                        mimeType  : 'text/html'
                    )

                    printMsg('info', 'メール通知に成功しました。')
                    printMsg('info', '送信先アドレス: ' + env.mail.address.debug)
                }
                catch(Exception e) {

                    printMsg('error', 'メール通知に失敗しました。')
                    throw e
                }

                // 判定結果を変数化
                def judgeResult = ["${server}": 'warning']

                break

            // 正常域
            default:

                // コマンド結果を標準出力
                printMsg('info', result['stdout'])

                // 判定結果を変数化
                def judgeResult = ["${server}": 'nomalend']
        }

        // 終了メッセージ
        printMsg('info', '-------------------------------------------------------')
        printMsg('info', 'WU起動数判定ステージ FINISH')
        printMsg('info', '-------------------------------------------------------')
    }

   /** WU起動数判定ステージ
     * ・
     * ・
     * ・
     * ・
     * ・
     */
    stage('後処理')
    {
        // WU起動数判定結果により、ジョブ終了ステータスを決定
        switch(result["${server}"])
        {
            case 'faital':

                currentBuild.result = 'FAILURE'

            case 'warning':

                currentBuild.result = 'FAILURE'

            case 'nomalend':

                currentBuild.result = 'SUCCESS'
        }

        // WU起動数判定結果をDBにインサート
        writeResultFile(judgeResult, 'resource_monitor_wu_execute_' + server)
    }
}}
