#!groovy

@Library('jenkins-common-lib') _

 node('master') { timestamps
{
   /** ジョブパラメータ取得ステージ
     * ・
     * ・
     * ・
     * ・
     * ・
     */
    stage('ジョブパラメータ取得')
    {
        try
        {
            // 仮の値（null）をセット
            def server = null
        }
        catch(MissingPropertyException e)
        {
            // 呼び出されたジョブから引き継いだパラメータで後続ステージに進む
            printMsg('info', 'ジョブパラメータ「server」に「' + server + '」がセットされました。')
        }

        try
        {
            // 応答に制限時間を設定
            timeout(time: 30, unit: 'SECONDS')
            {
                // ユーザから入力を受け付ける
                userInput = input(
                    message        : '''\
                                     |リソース取得先サーバを選択してください。
                                     |（応答時間：30秒）'''.stripMargin(),
                    ok             : '選択する',
                    parameters     : [
                        choice(
                            name   : 'リソース取得先サーバ名:',
                            choices: 'web/apサーバ\nバッチサーバ'
                        )
                    ]
                )
            }
        }
        catch(Exception e)
        {
            // 制限時間内に変数の中身がnullから変わっていない場合は、例外を投げる
            printMsg('error', '入力されたパラメータが確認できません。応答時間内にリソース取得先サーバを選択してください。')
            throw e
        }

        printMsg('info','入力されたパラメータをチェックします。')

        // 入力されたデータに合わせて、処理用の値をセット
        if(userInput == 'web/apサーバ')
        {
            server = 'webap'
        }
        if(userInput == 'バッチサーバ')
        {
            server = 'batch'
        }

        printMsg('info', 'ジョブパラメータ「server」に「' + server + '」がセットされました。')
    }

   /** WU起動数判定ステージ
     * ・
     * ・
     * ・
     * ・
     * ・
     */
    stage('WU起動数判定[' + server + ']')
    {
        // 開始メッセージ
        printMsg('info', '-------------------------------------------------------')
        printMsg('info', 'WU起動数判定ステージ START')
        printMsg('info', '-------------------------------------------------------')

        // AP設定ロード
        def env = loadEnvConfig()

        // リソース取得シェル実行
        def result = sshCmd(env, server, 'ls /opt/app/lib')

        // 標準エラーが返却されている場合は、例外を投げる
        assert result['stderror'] == null

        // WU起動数結果判定
        switch(true)
        {
            // 危険域
            case(result['stdout'].contains(env.resource.monitor.wu.execute.faital.keyword)) as Boolean:

                // コマンド結果を標準出力
                printMsg('warning', result['stdout'])

                // メール通知
                emailext(
                    to       : env.mail.address.debug,
                    subject  : '${DEFAULT_SUBJECT}ABORT',
                    body     : '''<p>ジョブ走行中に予期せぬエラーが発生しました。</p>
                                  <p>解析をお願いします。</p>''',
                    attachLog: false,
                    mimeType : 'text/html'
                )

                // 判定結果を変数化
                result.put('wu_execute', 'faital')

                break

            // 注意域
            case(result['stdout'].contains(env.resource.monitor.wu.execute.warning.keyword)) as Boolean:

                // コマンド結果を標準出力
                printMsg('warning', result['stdout'])

                // メール通知
                emailext(
                    to       : env.mail.address.debug,
                    subject  : '${DEFAULT_SUBJECT}ABORT',
                    body     : '''<p>ジョブ走行中に予期せぬエラーが発生しました。</p>
                                  <p>解析をお願いします。</p>''',
                    attachLog: false,
                    mimeType : 'text/html'
                )

                // 判定結果を変数化
                result.put('wu_execute', 'warning')
                println 'パラメータチェック'
                println result['wu_execute']

                break

            // 正常域
            default:

                // コマンド結果を標準出力
                printMsg('info', result['stdout'])

                // 判定結果を変数化
                result.put('wu_execute', 'nomalend')
        }

        // 終了メッセージ
        printMsg('info', '-------------------------------------------------------')
        printMsg('info', 'WU起動数判定ステージ FINISH')
        printMsg('info', '-------------------------------------------------------')
    }

   /** WU起動数判定ステージ
     * ・
     * ・
     * ・
     * ・
     * ・
     */
    stage('後処理')
    {
        // WU起動数判定結果により、ジョブ終了ステータスを決定
        switch(result['wu_execute'])
        {
            case 'faital':

                currentBuild.result = 'FAILURE'
                break

            case 'warning':

                currentBuild.result = 'FAILURE'
                break

            case 'nomalend':

                currentBuild.result = 'SUCCESS'
                break
        }

        // WU起動数判定結果をDBにインサート
        writeResultFile(result['wu_execute'], 'resource_monitor_wu_execute_' + server)
    }
}}
