// Jenkinsfile

@Library('jenkins-common-lib') _

/**
 * 　WU起動数監視ステージ
 * ・
 * ・
 * ・
 * ・
 * ・
 */

stage('WU起動数監視')
{
    node('master') { timestamps
    {
        // 宣言
        def stdout = new StringBuffer(), stderror = new StringBuffer()

        // 開始メッセージ
        printMsg('info', '-------------------------------------------------------')
        printMsg('info', 'WU起動数監視ステージ START')
        printMsg('info', '-------------------------------------------------------')

        // AP設定ロード
        try // nonserializable対策
        {
            def config = ['path':'/opt/app/conf', 'file':'env.groovy']
            def env = new ConfigSlurper().parse(new File(config['path'] + "/" + config['file']).toURL())
        }
        catch(Exception e) {}

        // AP設定ロードに失敗している場合は、例外を投げる
        //assert env.size() != 0

        // Webap,batchサーバのみ実施
        for (server in ['webap', 'batch'])
        {
            // リソース取得シェル実行
            def proc = 'ssh -i /Users/akira_air/.ssh/id_rsa -p 22 redmine@127.0.0.1 ls /opt/app/lib'.execute()

            // コマンド結果保存先設定
            proc.consumeProcessOutput(stdout, stderror)

            // コマンド結果出力が完了するまで待機
            proc.waitForProcessOutput()

            // エラー出力が発生している場合は、例外を投げる
            assert stderror.size() == 0

            // WU起動数結果判定
            switch(true)
            {
                // 危険域
                case(stdout.contains(env.resource.monitor.wu.execute.faital.keyword)) as Boolean:

                    // コマンド結果を標準出力
                    printMsg('warning', stdout)

                    // メール通知
                    try
                    {
                        def sendMail = emailext(
                            to        : '${ENV, var="debug_mail_address"}',
                            subject   : '${DEFAULT_SUBJECT}危険域',
                            body      : '''<p>ジョブ走行中に予期せぬエラーが発生しました。</p>
                                           <p>解析をお願いします。</p>''',
                            attachLog : true,
                            mimeType  : 'text/html'

                        ) { result ->

                            printMsg('info', 'メール通知に成功しました。')
                            printMsg('info', '送信先アドレス: ' + debug_mail_address)
                        }
                    }
                    catch(Exception e) {

                        printMsg('error', 'メール通知に失敗しました。')
                        throw e
                    }

                    // フラグを立てる
                    boolean failed_flag = true

                    break

                // 注意域
                case(stdout.contains(env.resource.monitor.wu.execute.warning.keyword)) as Boolean:

                    // コマンド結果を標準出力
                    printMsg('warning', stdout)

                    // メール通知
                    emailext(
                        to        : '${ENV, var="debug_mail_address"}',
                        subject   : '${DEFAULT_SUBJECT}ABORT',
                        body      : '''<p>ジョブ走行中に予期せぬエラーが発生しました。</p>
                                       <p>解析をお願いします。</p>''',
                        attachLog : true,
                        mimeType  : 'text/html'
                    )

                    // フラグを立てる
                    boolean failed_flag = true

                    break

                // 正常域
                default:

                    // 標準出力に出力
                    printMsg('info', stdout)
            }
        }}
    }
}
